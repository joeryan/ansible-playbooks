- hosts: servers
  become: true
  tasks:
    - name: Run apt-get dist-upgrade on server
      apt:
        update_cache: yes
        upgrade: dist
      tags:
        - update
        - never
    - name: Check if a reboot is required (changed = reboot required)
      stat: 
        path: /var/run/reboot-required
      register: reboot_required_file
      changed_when: reboot_required_file.stat.exists == True
      tags:
        - always
      
   # In a normal play, the pause action is only executed once, not once-per-host.
   # In this case, we really want to force the once-per-host thing.
   # ref http://stackoverflow.com/a/35169496
    - name: Prompt for rebooting
      pause:
        prompt: "Press ENTER to reboot {{ item }} now, or Ctrl+C to abort."
   # We need to check for the existence of 'reboot_required_file' first because play_hosts also
   # includes hosts that have failed. When a host has failed, it stops executing and thus doesn't
   # have 'reboot_required_file'. And if we try to access 'stat', boom! failure. We don't want that.
      when: "'reboot_required_file' in hostvars[item] and hostvars[item]['reboot_required_file'].stat.exists == True"
      with_items: "{{ play_hosts }}"
      tags:
        - rbot
        - never

    - name: Reboot host if requested by the system
      shell: sleep 2 && /sbin/shutdown -r now 'Rebooting host via Ansible to finish updates'
      args:
          removes: /var/run/reboot-required
      async: 300
      poll: 0
      ignore_errors: True
      when: reboot_required_file.stat.exists == True
      tags:
        - rbot
        - never

    - name: Wait for host to become reachable again
      wait_for_connection:
          delay: 30
          timeout: 300
      tags:
        - rbot
        - never

    - name: Get kernel version
      command: uname -a
      register: uname_result
      tags:
        - always

    - name: Display kernel version
      debug:
          var: uname_result.stdout_lines
      tags:
        - always
